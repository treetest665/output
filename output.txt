//server.java(IP communication)

import java.util.*; 
import java.io.*; 
import java.net.*;
public class Server {
public static void main(String args[]) throws Exception{
//Server server = new Server();
ServerSocket MyServer = new ServerSocket(2306); 
Socket ss = MyServer.accept();
DataInputStream din =new DataInputStream(ss.getInputStream()); 
DataOutputStream dout=new DataOutputStream(ss.getOutputStream());
BufferedReader br=new BufferedReader(new InputStreamReader(System.in)); 
Server server = new Server();
String str="",str2=""; 
int sum = 0;
while(!str.equals("stop")){
str=din.readUTF(); 
if(str.equals("stop"))
break;
sum = sum + Integer.parseInt(str);
}
dout.writeUTF(Integer.toString(sum)); 
dout.flush();
din.close();
ss.close(); 
MyServer.close();
}
}


//client.java(IP Communication)

import java.io.*; 
import java.util.*; 
import java.net.*; 
public class Client
{
public static void main(String args[])throws Exception
{
String send="",r="";
Socket MyClient = new Socket("192.168.187.189",2306);
DataInputStream din=new DataInputStream(MyClient.getInputStream()); 
DataOutputStream dout = new DataOutputStream(MyClient.getOutputStream()); 
Scanner sc = new Scanner(System.in);
while(!send.equals("stop")){
System.out.print("Send: "); 
send = sc.nextLine(); 
dout.writeUTF(send);
}
dout.flush(); 
r=din.readUTF();
System.out.println("Reply: "+ r);
dout.close();
din.close(); 
MyClient.close();
}
}


















//server.java(Group Communication)

import java.io.*;
import java.net.*;

public class Server {
    private ServerSocket serverSocket;
    private Socket client1Socket;
    private Socket client2Socket;
    private BufferedReader client1In;
    private PrintWriter client1Out;
    private BufferedReader client2In;
    private PrintWriter client2Out;

    public Server(int port) {
        try {
            serverSocket = new ServerSocket(port);
            System.out.println("Server started. Waiting for clients to connect...");

            client1Socket = serverSocket.accept();
            System.out.println("Client 1 connected");
            client1In = new BufferedReader(new InputStreamReader(client1Socket.getInputStream()));
            client1Out = new PrintWriter(client1Socket.getOutputStream(), true);

            client2Socket = serverSocket.accept();
            System.out.println("Client 2 connected");
            client2In = new BufferedReader(new InputStreamReader(client2Socket.getInputStream()));
            client2Out = new PrintWriter(client2Socket.getOutputStream(), true);

            startListening();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void startListening() {
        try {
            while (true) {
                String msgFromClient1 = client1In.readLine();
                if (msgFromClient1 != null) {
                    System.out.println("Client 1 says: " + msgFromClient1);
                    client2Out.println(msgFromClient1);
                }

                String msgFromClient2 = client2In.readLine();
                if (msgFromClient2 != null) {
                    System.out.println("Client 2 says: " + msgFromClient2);
                    client1Out.println(msgFromClient2);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        Server server = new Server(2036);
    }
}




//Client1.java 

import java.io.*;
import java.net.*;

public class Client1 {
    public static void main(String[] args) {
        try {
            Socket socket = new Socket("localhost", 2036);
            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            PrintWriter out = new PrintWriter(socket.getOutputStream(), true);

            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            String userInput;

            while ((userInput = reader.readLine()) != null) {
                out.println(userInput);
                String serverResponse = in.readLine();
                System.out.println("Server says: " + serverResponse);
            }

            socket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}




//Client2.java:

import java.io.*;
import java.net.*;

public class Client2 {
    public static void main(String[] args) {
        try {
            Socket socket = new Socket("localhost", 2036);
            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            PrintWriter out = new PrintWriter(socket.getOutputStream(), true);

            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            String userInput;

            while ((userInput = reader.readLine()) != null) {
                out.println(userInput);
                String serverResponse = in.readLine();
                System.out.println("Server says: " + serverResponse);
            }

            socket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
















//distributed_global avg

def time(s):
    ans = s.split(":")
    return int(ans[0]) * 60 + int(ans[1]) + int(ans[2])/60

n = input("Enter the agreed clock time: ")

init_val = time(n)

nodes = int(input("Enter the number of nodes: "))

dict_nodes = {}
ls = []

for i in range(nodes):
    print(f"Enter the clock time for {i + 1} node : ")
    x = input()
    ls.append(time(x))
    dict_nodes[chr(97 + i)] = []

print()
for key in dict_nodes.keys():
    print(f"{key} : {dict_nodes[key]}")

print()
print(ls)

for i in range(nodes):
    val = -float('inf')
    for i in range(nodes):
        diff = ls[i] - init_val
        dict_nodes[chr(97 + i)].append(diff)
        if diff < 0:
            val = max(val, diff)
    for i in range(nodes):
        if val != -float('inf'):
            ls[i] += abs(val)
    print()
    print(*ls)

print()
for key in dict_nodes.keys():
    print(f"{key} : {dict_nodes[key]}")

for i in range(nodes):
    avg = sum(dict_nodes[chr(97 + i)]) / nodes
    if avg >= 0:
        ls[i] -= abs(avg)
    else:
        ls[i] += abs(avg)

print()
print(ls)

def get_time(val):
    hours = int(val // 60)
    mins = int(val - hours * 60)
    seconds = int((val - int(val)) * 60)
    return str(hours) + ":" +  str(mins) + ":" + str(seconds)

for i in range(nodes):
    print(f'Time for Node {chr(97 + i)} : ', get_time(ls[i]))























//berkley

def time(s):
    ans = s.split(":")
    return int(ans[0]) * 60 + int(ans[1]) + int(ans[2])/60

slaves=int(input("Enter the number of clients : "))

master = input("Enter the Time of master node : ")
masterTime=time(master)
print(masterTime)

ls = []

for i in range(slaves):
    print(f"Enter the clock time for slave {i + 1} : ")
    x = input()
    print(time(x))
    ls.append(time(x))

def get_time(val):
    hours = int(val // 60)
    mins = int(val - hours * 60)
    seconds = int((val - int(val)) * 60)
    return str(hours) + ":" +  str(mins) + ":" + str(seconds)

def berkeley_sync(master_time, client_times):
    clients=[time-master_time for time in client_times]
    print(clients)
    avg_time = sum(clients) / (len(client_times)+1)
    print(avg_time)

    masterAdjustedTime=master_time+avg_time

    adjusted_times = [masterAdjustedTime-time for time in client_times]

    print(masterAdjustedTime)s
    print(get_time(masterAdjustedTime))

    return adjusted_times,masterAdjustedTime

ans, masterAdjustedTime=berkeley_sync(masterTime,ls)
print(ans)
for i in range(slaves):
    print(f"Time for slave {i+1} : {get_time(ls[i]+ans[i])}")

print(f"Time of master node : {get_time(masterAdjustedTime)}")





















//bully algorithm

class Process:
    def __init__(self, _id, is_alive):
        self.id = _id
        self.is_alive = is_alive
        self.status = "active" if is_alive else "inactive"

class BullyAlgorithm:
   def __init__(self, n, processes):
     self.n = n
     self.processes = processes
     self.messages = []
     self.responses = []

   def initiate_election(self, initiator_id, is_initiator):
      self.messages.append(f"\nProcess with ID {initiator_id} initiates the election!")
      election_messages = []
      for i in range(initiator_id + 1, self.n + 1):
         if i <= self.n:
            election_messages.append((initiator_id, i))
            self.messages.append(f"Process {initiator_id} sends Election({initiator_id}) message to process {i}")
            
      for sender, receiver in election_messages:
         if self.processes[receiver- 1].is_alive:
            if not is_initiator or (is_initiator and receiver != initiator_id):
               self.responses.append((receiver, initiator_id))
    
      if self.responses:
         elected_coord = max(self.responses)[0]
      else:
         elected_coord = initiator_id
      
      return elected_coord
   
   def run_election(self, initiator_id):
      elected_coord = initiator_id
      
      for i in range(initiator_id- 1, self.n):
         if self.processes[i].is_alive:
            if self.processes[i].id != initiator_id:
               elected_coord = self.initiate_election(self.processes[i].id, False)
            else:
               elected_coord = self.initiate_election(initiator_id, True)
      print('\n'.join(self.messages))
      print("\nResponses:")
      for response in self.responses:
         print(f"Process {response[0]} responds with OK({response[1]}) message")
      print(f"\nProcess {elected_coord} becomes the Coordinator!")


if __name__ == "__main__":
   n =int(input("Enter the total number of processes: "))
   binary_string = input("Enter the binary string indicating which processes are alive (1) or dead (0): ")
   processes = [Process(i + 1, int(bit)) for i, bit in enumerate(binary_string)]
   print("\nProcesses:")
   for process in processes:
      print(f"Process {process.id}- {'Alive' if process.is_alive else 'Dead'}")
   initiator_id = int(input(f"\nEnter the process ID that initiates the election (1-{n}): "))
   bully_algorithm = BullyAlgorithm(n, processes)
   bully_algorithm.run_election(initiator_id)
















//raymond_tree

# no. of nodes
n = 5

request_queue = {0: [], 1: [], 2: [], 3: [], 4: []}
holder = {0: 0, 1: 0, 2: 0, 3: 1, 4: 1}
token = {0: 1, 1: 0, 2: 0, 3: 0, 4: 0}

adj_matrix = [[1, 0, 0, 0, 0],
              [1, 0, 0, 0, 0],
              [1, 0, 0, 0, 0],
              [0, 1, 0, 0, 0],
              [0, 1, 0, 0, 0]]

print("\nRaymond Tree Based Mutual Exclusion")
print("\nAdjacency Matrix for spanning tree:\n")

for i in adj_matrix:
    print(*i)  # printing values as individual elements and not as a list

# Process that wants to enter CS
req_process = int(input("\nEnter the process who wants to enter CS : "))


def find_parent(req_process):

    # Sending the request to the root that has the token
    request_queue[req_process].append(req_process)  # 3: [3]

    for i in range(n):
        if(adj_matrix[req_process][i] == 1):  # if req_process is pointing to the node i
            parent = i  # node number 1 is the parent
            # node no.1 appends node no.3(req_process) in its req_q
            request_queue[parent].append(req_process)
            break

    print("\nProcess {} sending request to Parent Process {}".format(
        req_process, parent))
    print("Request queue: ", request_queue)

    # checking if parent has the token or not
    if(token[parent] == 1):
        return parent
    else:
        parent = find_parent(parent)

    return parent


parent = find_parent(req_process)

while(token[req_process] != 1):  # while 3 does not have token

    child = request_queue[parent][0]  # 1 (child of 0)
    request_queue[parent].pop(0)  # removing 1 from req_q list of node no.0

    holder[parent] = child  # node 0 pointing to node 1
    holder[child] = 0  # node 1 not pointing to any node
    token[parent] = 0  # token is no longer with node 0
    token[child] = 1  # token is with node 1

    print("\nParent process {} has the token and sends the token to the request process {}".format(
        parent, child))
    print("Request Queue: ", request_queue)
    parent = child

if(token[parent] == 1 and request_queue[parent][0] == parent):
    request_queue[parent].pop(0)
    # holder variable for the node which has the token points to itself
    holder[parent] = parent
    print("\nProcess {} enter the Critical Section".format(parent))
    print("Request Queue: ", request_queue)

if(len(request_queue[parent]) == 0):
    print("\nRequest Queue of process {} is empty. Therefore Release Critical Section".format(parent))

print("\nHolder: ", holder)










//ricart_algorithm


numProcesses = int(input("Enter number of processes: "))
numCS = int(input("Enter Number of processes that want to enter CS: "))
# timestamp: process
processMap = {}
timestamps = []
for i in range(numCS):
    process, timestamp = input(f"Enter the Process ID and Timestamp of process: ").split()
    processMap[int(timestamp)] = int(process)
    timestamps.append(int(timestamp))
print()
timestamps.sort()
for time in timestamps:
    processCS = processMap[time]
    for i in range(numProcesses):
        if(processCS != i):
            print(f"Process {processCS} has requested Process {i}")
    print()
for time in timestamps:
    processCS = processMap[time]
    for i in range(numProcesses):
        if(processCS != i):
            print(
                f"Process {i} has Accepted the request of process {processCS}")
    print()
    print(f'Process {processCS} has now entered the CS')
    print(f'Process {processCS} has now exited the CS')
    print()












// bankers_algorithm



n = int(input("Enter the number of processes : "))
r = int(input("Enter the number of resources : "))

alloc = []
mx = []
need = []

print("Enter allocated amount for each process :")
for i in range(n):
    alloc.append(list(map(int, input().split())))

print("Enter max amount for each process :")
for i in range(n):
    mx.append(list(map(int, input().split())))

print("Enter needed amount for each process :")
for i in range(n):
    need.append(list(map(int, input().split())))

avail = list(map(int, input("Enter the available resources : ").split()))

safe = []


def display(mx, alloc, need, avail):
    print('Available Resources : ', avail)
    print('Allocated Matrix :- ')
    for row in alloc:
        print(row)
    print()
    print('Max Matrix :- ')
    for row in mx:
        print(row)
    print()
    print('Need Matrix :- ')
    for row in need:
        print(row)
    print()


def bankers(n, r, mx, alloc, need, avail):
    print('***** Initially *****')
    display(mx, alloc, need, avail)

    while True:
        mark = True

        for i in range(n):
            if i + 1 in safe:
                continue

            mark = True
            for j in range(r):
                if need[i][j] > avail[j]:
                    mark = False
                    break

            if mark:
                safe.append(i + 1)
                for j in range(r):
                    avail[j] += alloc[i][j]  # once process done, increase jth resource availability
                    alloc[i][j] = 0
                    need[i][j] = '-'  # because process is done

                print(f'***** After allocating resources to P{i + 1} *****')
                print(f'P{i + 1} can be allocated resources for execution..')
                display(mx, alloc, need, avail)
                print()
                break

        if not mark:
            print("System is NOT in a safe state !!")
            break
        if len(safe) == n:
            print("System is in a safe state !!")
            print("Safe Sequence is : ", end=" ")
            for i in safe:
                print(f"P{i}", end=" ")
            print()
            break


bankers(n, r, mx, alloc, need, avail)













//load_balancing

import java.util.Scanner;

public class LoadBalancing {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter no of servers: ");
        int numServers = sc.nextInt();
        System.out.print("Enter no of processes: ");
        int numProcesses = sc.nextInt();

        while (true) {
            printServerLoad(numServers, numProcesses);
            displayMenu();
            System.out.print("> ");
            int choice = sc.nextInt();
            int temp;

            switch (choice) {
                case 1:
                    System.out.println("Enter number of servers to be added: ");
                    temp = sc.nextInt();
                    numServers += temp;
                    break;
                case 2:
                    System.out.println("Enter number of servers to be removed: ");
                    temp = sc.nextInt();
                    numServers -= temp;
                    break;
                case 3:
                    System.out.println("Enter number of processes to be added: ");
                    temp = sc.nextInt();
                    numProcesses += temp;
                    break;
                case 4:
                    System.out.println("Enter number of processes to be removed: ");
                    temp = sc.nextInt();
                    numProcesses -= temp;
                    break;
                case 5:
                    sc.close();
                    return;
                default:
                    break;
            }
        }
    }

    static void printServerLoad(int numServers, int numProcesses) {
        int processesPerServer = numProcesses / numServers;
        int extraProcesses = numProcesses % numServers;

        int i = 0;

        // loop for extra process i.e adding 1 to each server
        for (i = 0; i < extraProcesses; i++)
            System.out.println("Server " + (i + 1) + " has " + (processesPerServer + 1) + " processes");

        // loop for remaining processes
        for (; i < numServers; i++)
            System.out.println("Server " + (i + 1) + " has " + processesPerServer + " processes");
    }

    static void displayMenu() {
        System.out.println("1. Add Server");
        System.out.println("2. Remove Server");
        System.out.println("3. Add Processes");
        System.out.println("4. Remove Processes");
        System.out.println("5. Exit");
    }
}





//Mulithreading


public class Main {

    static class Multithreading extends Thread {

        private int threadNumber;

        public Multithreading(int threadNumber) {
            this.threadNumber = threadNumber;
        }

        @Override
        public void run() {
            for (int i = 1; i <= 5; i++) {
                System.out.println(i + " from thread " + threadNumber);
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public static void main(String[] args) {

        for (int i = 1; i <= 5; i++) {
            Multithreading myThing = new Multithreading(i);
            myThing.start();
        }
    }
}

